<project name="som" basedir="." default="compile-all"
    xmlns:jacoco="antlib:org.jacoco.ant">

    <property name="src.dir"     value="src"/>
    <property name="src_gen.dir" value="src_gen"/>
    <property name="lib.dir"     location="libs" />
    <property name="bd.dir"      location="${lib.dir}/black-diamonds/" />
    <property name="unit.dir"    value="tests/java" />
    <property name="kompos.dir"  value="tools/kompos" />
    <property name="truffle.dir" location="${lib.dir}/truffle/truffle" />
    <property name="sdk.dir"     location="${lib.dir}/truffle/sdk" />
    <property name="sdk.build"   location="${sdk.dir}/mxbuild/dists" />
    <property name="truffle.build" location="${truffle.dir}/mxbuild/dists" />
    <property name="somns-deps.version" value="0.3.3" />
    <property name="checkstyle.version" value="7.6.1" />
    <property name="jacoco.version"     value="0.8.0" />

    <!-- <property name="lib.url" value="https://dl.bintray.com/smarr/SOM" /> -->
    <property name="lib.url" value="http://stefan-marr.de/dev" />

    <property name="mx.cmd" value="../../mx/mx" />

    <property name="build.dir"   value="build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>

    <property environment="env"/>

    <path id="project.classpath">
        <pathelement location="${classes.dir}" />
        <pathelement location="${unit.dir}" />
        <pathelement location="${bd.dir}/build/classes" />
        <pathelement location="${sdk.build}/graal-sdk.jar" />
        <pathelement location="${sdk.build}/word-api.jar" />
        <pathelement location="${lib.dir}/somns-deps-dev.jar" />
        <pathelement location="${lib.dir}/somns-deps.jar" />
        <pathelement location="${truffle.build}/truffle-api.jar" />
        <pathelement location="${truffle.build}/truffle-debug.jar" />
        <pathelement location="${truffle.build}/truffle-dsl-processor.jar" />
        <pathelement location="${truffle.build}/truffle-tck.jar" />
    </path>

    <target name="clean" description="Remove build directories and generated code">
        <delete dir="${build.dir}"/>
        <delete dir="${src_gen.dir}"/>
    </target>

    <target name="clean-truffle" depends="check-truffle-available" if="truffle.present">
        <exec executable="${mx.cmd}" dir="${truffle.dir}">
            <arg value="clean"/>
        </exec>
    </target>

    <target name="clobber" description="Do clean, and also clean truffle build" depends="clean,clean-truffle">
        <delete dir="${kompos.dir}/out"/>
        <delete dir="${kompos.dir}/node_modules"/>
    </target>

    <target name="check-truffle-available">
        <available file="${lib.dir}/truffle/.git" property="truffle.present"/>
    </target>
    <target name="truffle" depends="check-truffle-available"
            unless="truffle.present">
      <exec executable="./.gitloadmodules" failonerror="true">
      </exec>
    </target>

    <target name="truffle-libs" unless="skip.libs" depends="truffle">
        <exec executable="${mx.cmd}" dir="${truffle.dir}" failonerror="true">
            <arg value="build"/>
            <arg value="--no-native"/>
        </exec>
    </target>

    <target name="bd-libs"> <!-- implicit dependency on truffle-libs -->
        <ant dir="${bd.dir}" useNativeBasedir="true" target="libs-junit" inheritAll="false"/>
        <ant dir="${bd.dir}" useNativeBasedir="true" target="compile-nodeps" inheritAll="false">
            <property name="sdk.build"   value="${sdk.build}" />
            <property name="truffle.dir" value="${truffle.dir}" />
            <property name="truffle.build" value="${truffle.build}" />
        </ant>
    </target>

    <target name="ideinit" depends="source">
        <exec executable="${mx.cmd}" dir="${truffle.dir}" failonerror="true">
            <arg value="eclipseinit"/>
        </exec>
        <exec executable="${mx.cmd}" dir="${sdk.dir}" failonerror="true">
            <arg value="eclipseinit"/>
        </exec>
    </target>

    <target name="libs" depends="truffle-libs,bd-libs" unless="skip.libs">
        <get src="${lib.url}/somns-deps-${somns-deps.version}.jar"
            usetimestamp="true"
            dest="${lib.dir}/somns-deps.jar" />
        <get src="${lib.url}/somns-deps-dev-${somns-deps.version}.jar"
            usetimestamp="true"
            dest="${lib.dir}/somns-deps-dev.jar" />
    </target>

    <target name="source" description="Download Source Jars for development">
        <get src="${lib.url}/somns-deps-source-${somns-deps.version}.jar"
            usetimestamp="true"
            dest="${lib.dir}/somns-deps-source.jar" />
    </target>

    <target name="eclipseformat">
        <pathconvert pathsep=" " property="javafiles">
            <fileset dir="${src.dir}">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="${unit.dir}">
                <include name="**/*.java"/>
            </fileset>
        </pathconvert>
        <exec executable="${env.ECLIPSE_EXE}" dir="${basedir}">
            <arg value="-nosplash"/>
            <arg value="-application"/>
            <arg value="-consolelog"/>
            <arg value="-data"/>
            <arg value="${basedir}"/>
            <arg value="-vm"/>
            <arg value="${env.JAVA_HOME}/bin/java"/>
            <arg value="org.eclipse.jdt.core.JavaCodeFormatter"/>
            <arg value="-config"/>
            <arg value="${basedir}/.settings/org.eclipse.jdt.core.prefs"/>
            <arg line="${javafiles}"/>
        </exec>
    </target>

    <target name="eclipseformat-check" depends="eclipseformat">
        <exec executable="git" dir="${basedir}">
            <arg value="status" />
            <arg value="*.java" />
        </exec>
        <exec executable="git" dir="${basedir}" failonerror="true">
            <arg value="diff-index" />
            <arg value="--quiet" />
            <arg value="--exit-code" />
            <arg value="--ignore-submodules" />
            <arg value="HEAD" />
        </exec>
    </target>

    <target name="checkstyle-jar">
        <get src="http://tenet.dl.sourceforge.net/project/checkstyle/checkstyle/${checkstyle.version}/checkstyle-${checkstyle.version}-all.jar"
            usetimestamp="true"
            dest="${lib.dir}/checkstyle-${checkstyle.version}-all.jar" />
    </target>

    <target name="checkstyle" depends="checkstyle-jar" description="Check Code with Checkstyle">
        <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" classpath="${lib.dir}/checkstyle-${checkstyle.version}-all.jar" />
        <checkstyle config=".checkstyle_checks.xml">
          <fileset dir="src" includes="**/*.java"/>
          <formatter type="plain"/>
        </checkstyle>
    </target>

    <target name="jacoco-lib" description="Get JaCoCo dependency">
        <get src="http://search.maven.org/remotecontent?filepath=org/jacoco/jacoco/${jacoco.version}/jacoco-${jacoco.version}.zip"
            usetimestamp="true"
            dest="${lib.dir}/jacoco-${jacoco.version}.zip" />
        <unzip src="${lib.dir}/jacoco-${jacoco.version}.zip" dest="${lib.dir}/jacoco"/>
        <taskdef uri="antlib:org.jacoco.ant"
            resource="org/jacoco/ant/antlib.xml"
            classpath="${lib.dir}/jacoco/lib/jacocoant.jar" />
    </target>

    <target name="codacy-coverage-lib" description="Report Coverage to Codacy">
        <get src="https://oss.sonatype.org/service/local/repositories/releases/content/com/codacy/codacy-coverage-reporter/2.0.2/codacy-coverage-reporter-2.0.2-assembly.jar"
            usetimestamp="true"
            dest="${lib.dir}/codacy-coverage-reporter.jar" />
    </target>

    <target name="compile-som" description="Compile SOMns">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${classes.dir}" />
        <mkdir dir="${src_gen.dir}" />
        <javac includeantruntime="false" srcdir="${src.dir}" destdir="${classes.dir}" debug="true">
          <classpath refid="project.classpath" />
          <compilerarg line="-s ${src_gen.dir}" />
          <compilerarg line="-XDignore.symbol.file" />
          <compilerarg line="-Xlint:all" />
        </javac>
        <javac includeantruntime="false" srcdir="${src_gen.dir}" destdir="${classes.dir}" debug="true">
          <classpath refid="project.classpath" />
          <compilerarg line="-s ${src_gen.dir}" />
          <compilerarg line="-Xlint:all" />
        </javac>
        <javac includeantruntime="false" srcdir="${unit.dir}" destdir="${classes.dir}" debug="true">
          <classpath refid="project.classpath" />
        </javac>
    </target>

    <target name="compile" depends="libs,compile-som" description="Compile SOMns and dependencies">
    </target>

    <target name="kompos" description="Build Kompos">
        <exec executable="npm" dir="${kompos.dir}" failonerror="true">
            <arg value="--quiet"/>
            <arg value="install"/>
        </exec>
    </target>

    <target name="compile-all" depends="compile,kompos" description="Build SOMns and Kompos">
    </target>

    <target name="jar" depends="compile" description="Package as JAR">
        <jar destfile="${build.dir}/som.jar" basedir="${classes.dir}"></jar>
    </target>

    <target name="unit-tests" depends="compile,jacoco-lib" description="Execute tests">
      <jacoco:coverage>
        <junit haltonerror="false" haltonfailure="false" failureproperty="test.failed"
            outputtoformatters="true" fork="true" forkmode="once">
            <jvmarg value="-ea" />
            <jvmarg value="-esa" />
            <classpath refid="project.classpath" />
            <batchtest fork="yes" filtertrace="false">
              <fileset dir="${unit.dir}">
                  <include name="**/*Test*.java"/>
                  <include name="**/*TCK.java"/>
              </fileset>
            </batchtest>
            <formatter type="brief" usefile="false"/>
        </junit>
     </jacoco:coverage>

     <jacoco:coverage>
        <java classname="som.VM" fork="true" failonerror="true">
            <classpath refid="project.classpath" />
            <jvmarg value="-ea" />
            <jvmarg value="-esa" />
            <arg line="core-lib/TestSuite/TestRunner.ns" />
        </java>
     </jacoco:coverage>

     <fail message="Basic tests failed." if="test.failed" />
    </target>

    <target name="som-tests" depends="compile">
      <!-- delete old coverage data, this should be the first task generating coverage data -->
      <delete file="all.gcov" />

      <exec executable="./som" failonerror="true">
        <arg value="--coverage" />
        <arg value="all.gcov" />
        <arg value="--java-coverage" />
        <arg value="jacoco.exec" />
        <arg value="-G" />
        <arg value="core-lib/TestSuite/TestRunner.ns" />
      </exec>

      <exec executable="./som" failonerror="true">
        <arg value="-X" />
        <arg value="core-lib/TestSuite/TestRunner.ns" />
      </exec>
    </target>

    <target name="dynamic-metrics-tests" depends="compile-som">
      <exec executable="tests/dym/test.sh" failonerror="true">
          <arg value="--coverage" />
      </exec>
    </target>

    <target name="superinstructions-tests" depends="compile-som">
      <exec executable="tests/superinstructions/test.sh" failonerror="true"></exec>
    </target>

    <target name="replay-tests" depends="compile">
      <exec executable="tests/replay/test.sh" failonerror="true">
          <arg value="1" />
      </exec>
      <exec executable="tests/replay/test.sh" failonerror="true">
          <arg value="2" />
      </exec>
    </target>

    <target name="core-tests" depends="unit-tests,som-tests,dynamic-metrics-tests,superinstructions-tests">
    </target>

    <target name="send-java-coverage" depends="jacoco-lib,codacy-coverage-lib">
      <jacoco:report>
        <executiondata>
          <file file="jacoco.exec"/>
        </executiondata>

        <structure name="SOMns coverage">
          <classfiles>
            <fileset dir="${classes.dir}"/>
            <fileset dir="${bd.dir}/build/classes"/>
          </classfiles>
          <sourcefiles encoding="UTF-8">
            <fileset dir="src"/>
            <fileset dir="${bd.dir}/src"/>
          </sourcefiles>
        </structure>

        <!-- <html destdir="report"/> -->
        <xml destfile="jacoco.xml"/>
      </jacoco:report>

      <java classname="com.codacy.CodacyCoverageReporter">
        <classpath>
          <pathelement location="${lib.dir}/codacy-coverage-reporter.jar" />
        </classpath>
        <arg value="-l" />
        <arg value="Java" />
        <arg value="-r" />
        <arg value="jacoco.xml" />
      </java>
    </target>

    <target name="send-somns-coverage">
        <!-- submit coverage data -->
        <java classname="coveralls.Report" fork="true" failonerror="true">
            <classpath refid="project.classpath" />
            <arg value="${env.COVERALLS_REPO_TOKEN}" />
            <arg value="all.gcov" />
        </java>
    </target>

    <target name="coverage" depends="send-java-coverage,send-somns-coverage" />

    <target name="tests" depends="core-tests,replay-tests,coverage">
    </target>
</project>
