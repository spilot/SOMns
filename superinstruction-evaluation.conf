# Config file for ReBench
# Config format is YAML (see http://yaml.org/ for detailed spec)

standard_run: all
standard_data_file: 'si-performance.data'
standard_experiment: interp-fast

statistics:
    confidence_level: 0.95

# determines how often each benchmark is executed (?)
runs:
    number_of_data_points: 3

quick_runs:
    number_of_data_points: 3
    max_time: 60   # time in seconds

# definition of benchmark suites
benchmark_suites:
    macro-startup:
        gauge_adapter: RebenchLog
        command: &MACRO_CMD " core-lib/Benchmarks/Harness.ns %(benchmark)s "
        max_runtime: 600
        benchmarks:
            - CD:
                extra_args: "1 0 2"
                codespeed_name: "1st.CD"
            - Havlak:
                extra_args: "1 0 1"
                codespeed_name: "1st.Havlak"
            - Richards:
                extra_args: "1 0 1"
                codespeed_name: "1st.Richards"
            - RichardsNS:
                extra_args: "1 0 1"
                codespeed_name: "1st.RichardsNS"
            - DeltaBlue:
                extra_args: "1 0 200"
                codespeed_name: "1st.DeltaBlue"
            - DeltaBlueNS:
                extra_args: "1 0 200"
                codespeed_name: "1st.DeltaBlueNS"
            - Mandelbrot:
                extra_args: "1 0 50"
                codespeed_name: "1st.Mandelbrot"
            - NBody:
                extra_args: "1 0 10000"
                codespeed_name: "1st.NBody"
            - Json:
                extra_args: "1 0 2"
                codespeed_name: "1st.Json"
            - GraphSearch:
                extra_args: "1 0 1"
                codespeed_name: "1st.GraphSearch"
            - PageRank:
                extra_args: "1 0 100"
                codespeed_name: "1st.PageRank"
            - LeeTM:
                extra_args: "1 0 4"
                codespeed_name: "1st.Lee"
            - Vacation:
                extra_args: "1 0 8"
                codespeed_name: "1st.Vacation"
            - Splay:
                extra_args: "1 0 1"
                codespeed_name: "1st.Splay"

    macro-steady:
        gauge_adapter: RebenchLog
        command: *MACRO_CMD
        max_runtime: 6000
        benchmarks:
            - CD:
                extra_args: "130 0 100"
                codespeed_name: "peak.CD"
                warmup: 30
            - Havlak:
                extra_args: "130 0 5"
                codespeed_name: "peak.Havlak"
                warmup: 30
            - Richards:
                extra_args: "130 0 60"
                codespeed_name: "peak.Richards"
                warmup: 30
            - RichardsNS:
                extra_args: "130 0 60"
                codespeed_name: "peak.RichardsNS"
                warmup: 30
            - DeltaBlue:
                extra_args: "250 0 1000"
                codespeed_name: "peak.DeltaBlue"
                warmup: 150
            - DeltaBlueNS:
                extra_args: "250 0 1000"
                codespeed_name: "peak.DeltaBlue"
                warmup: 150
            - Mandelbrot:
                extra_args: "110 0 400"
                codespeed_name: "peak.Mandelbrot"
                warmup: 10
            - NBody:
                extra_args: "120 0 150000"
                codespeed_name: "peak.NBody"
                warmup: 20
            - Json:
                extra_args: "120 0 50"
                codespeed_name: "peak.Json"
                warmup: 20
            - GraphSearch:
                extra_args: "250 0 15"
                codespeed_name: "peak.GraphSearch"
                warmup: 100
            - PageRank:
                extra_args: "120 0 500"
                codespeed_name: "peak.PageRank"
                warmup: 20
            - LeeTM:
                extra_args: "150 0 2"
                codespeed_name: "peak.Lee"
                warmup: 30
            - Vacation:
                extra_args: "150 0 7"
                codespeed_name: "peak.Vacation"
                warmup: 30
            - Splay:
                extra_args: "150 0 1"
                codespeed_name: "peak.Splay"
                warmup: 30

    som-startup:
        gauge_adapter: RebenchLog
        command: *MACRO_CMD
        max_runtime: 600
        benchmarks:
            - Fannkuch:
                extra_args: "1 0 7"
                codespeed_name: "1st.Fannkuch"
            - List:
                extra_args: "1 0 50"
                codespeed_name: "1st.List"
            - Bounce:
                extra_args: "1 0 20"
                codespeed_name: "1st.Bounce"
            - Permute:
                extra_args: "1 0 10"
                codespeed_name: "1st.Permute"
            - Queens:
                extra_args: "1 0 10"
                codespeed_name: "1st.Queens"
            - Storage:
                extra_args: "1 0 20"
                codespeed_name: "1st.Storage"
            - Sieve:
                extra_args: "1 0 100"
                codespeed_name: "1st.Sieve"
            - Towers:
                extra_args: "1 0 20"
                codespeed_name: "1st.Towers"

    som-steady:
        gauge_adapter: RebenchLog
        command: *MACRO_CMD
        max_runtime: 600
        benchmarks:
            - Fannkuch:
                extra_args: "55 0 9"
                codespeed_name: "peak.Fannkuch"
                warmup: 5
            - List:
                extra_args: "70 0 1000"
                codespeed_name: "peak.List"
                warmup: 20
            - Bounce:
                extra_args: "60 0 1000"
                codespeed_name: "peak.Bounce"
                warmup: 10
            - Permute:
                extra_args: "60 0 500"
                codespeed_name: "peak.Permute"
                warmup: 10
            - Queens:
                extra_args: "120 0 400"
                codespeed_name: "peak.Queens"
                warmup: 70
            - Storage:
                extra_args: "75 0 1000"
                codespeed_name: "peak.Storage"
                warmup: 25
            - Sieve:
                extra_args: "60 0 400"
                codespeed_name: "peak.Sieve"
                warmup: 10
            - Towers:
                extra_args: "60 0 300"
                codespeed_name: "peak.Towers"
                warmup: 10

    sort-startup:
        gauge_adapter: RebenchLog
        command: &SORT_CMD " core-lib/Benchmarks/Harness.ns Sort.%(benchmark)s "
        max_runtime: 600
        benchmarks:
            - TreeSort:
                extra_args: "1 0 10"
                codespeed_name: "1st.TreeSort"
            - BubbleSort:
                extra_args: "1 0 25"
                codespeed_name: "1st.BubbleSort"
            - QuickSort:
                extra_args: "1 0 20"
                codespeed_name: "1st.QuickSort"

    sort-steady:
        gauge_adapter: RebenchLog
        command: *SORT_CMD
        max_runtime: 600
        benchmarks:
            - BubbleSort:
                extra_args: "60 0 2000"
                codespeed_name: "peak.BubbleSort"
                warmup: 10
            - QuickSort:
                extra_args: "60 0 800"
                codespeed_name: "peak.QuickSort"
                warmup: 10
            - TreeSort:
                extra_args: "60 0 300"
                codespeed_name: "peak.TreeSort"
                warmup: 10

    micro-startup:
        gauge_adapter: RebenchLog
        command: &MICRO_CMD " core-lib/Benchmarks/Harness.ns LanguageFeatures.%(benchmark)s "
        max_runtime: 30
        benchmarks:
            - Fibonacci:
                extra_args: "1 0 100"
                codespeed_name: "1st.Fibonacci"
            - ClosureDefFibonacci:
                extra_args: "1 0 50"
                codespeed_name: "1st.ClosureDefFibonacci"
            - ClosureFibonacci:
                extra_args: "1 0 50"
                codespeed_name: "1st.ClosureFibonacci"
            - Dispatch:
                extra_args: "1 0 50"
                codespeed_name: "1st.Dispatch"
            - Loop:
                extra_args: "1 0 100"
                codespeed_name: "1st.Loop"
            - Recurse:
                extra_args: "1 0 50"
                codespeed_name: "1st.Recurse"
            - Sum:
                extra_args: "1 0 100"
                codespeed_name: "1st.Sum"
            - IntegerLoop:
                extra_args: "1 0 100"
                codespeed_name: "1st.IntegerLoop"
            - FieldLoop:
                extra_args: "1 0 2"
                codespeed_name: "1st.FieldLoop"
            - WhileLoop:
                extra_args: "1 0 100"
                codespeed_name: "1st.WhileLoop"

    micro-steady:
        gauge_adapter: RebenchLog
        command: *MICRO_CMD
        max_runtime: 600
        benchmarks:
            - Fibonacci:
                extra_args: "70 0 1000"
                codespeed_name: "peak.Fibonacci"
                warmup: 20
            - ClosureDefFibonacci:
                extra_args: "70 0 300"
                codespeed_name: "peak.ClosureDefFibonacci"
                warmup: 20
            - ClosureFibonacci:
                extra_args: "70 0 300"
                codespeed_name: "peak.ClosureFibonacci"
                warmup: 20
            - Dispatch:
                extra_args: "55 0 2000"
                codespeed_name: "peak.Dispatch"
                warmup: 5
            - Loop:
                extra_args: "55 0 3000"
                codespeed_name: "peak.Loop"
                warmup: 5
            - Recurse:
                extra_args: "70 0 2000"
                codespeed_name: "peak.Recurse"
                warmup: 20
            - Sum:
                extra_args: "55 0 3000"
                codespeed_name: "peak.Sum"
                warmup: 5
            - IntegerLoop:
                extra_args: "55 0 2000"
                codespeed_name: "peak.IntegerLoop"
                warmup: 5
            - FieldLoop:
                extra_args: "55 0 200"
                codespeed_name: "peak.FieldLoop"
                warmup: 5
            - WhileLoop:
                extra_args: "55 0 2000"
                codespeed_name: "peak.WhileLoop"
                warmup: 5

    fj-steady:
        description: Sequential version of Fork/Join benchmarks for normal performance tracking
        gauge_adapter: RebenchLog
        command: &FJ_CMD " core-lib/Benchmarks/Harness.ns core-lib/Benchmarks/ForkJoin/%(benchmark)s%(input)s.ns "
        input_sizes:
          - Seq # all fork() are compute()
        max_runtime: 120
        benchmarks:
            ## Excluding Fib, NQueens, QuickSort
            ## we have similar versions already
            - CilkSort:
                extra_args: "130 0 20"
                codespeed_name: "peak.CilkSort"
                warmup: 30
            - Integrate:
                extra_args: "130 0 100"
                codespeed_name: "peak.Integrate"
                warmup: 30
            - Jacobi:
                extra_args: "130 0 200"
                codespeed_name: "peak.Jacobi"
                warmup: 30
            - LUDecomposition:
                extra_args: "130 0 128"
                codespeed_name: "peak.LUDecomposition"
                warmup: 30

    fj-startup:
        description: Sequential version of Fork/Join benchmarks for normal performance tracking
        gauge_adapter: RebenchLog
        command: *FJ_CMD
        input_sizes:
          - Seq # all fork() are compute()
        max_runtime: 60
        benchmarks:
            ## Excluding Fib, NQueens, QuickSort
            ## we have similar versions already
            - CilkSort:
                extra_args: "1 0 1"
                codespeed_name: "1st.CilkSort"
            - Integrate:
                extra_args: "1 0 50"
                codespeed_name: "1st.Integrate"
            - Jacobi:
                extra_args: "1 0 100"
                codespeed_name: "1st.Jacobi"
            - LUDecomposition:
                extra_args: "1 0 128"
                codespeed_name: "1st.LUDecomposition"

# VMs have a name and are specified by a path and the binary to be executed
virtual_machines:
    SOMns-interp-with-SI:
        path: .
        binary: som
        args: "-G -Dsom.superinstructions=true "
    SOMns-graal-with-SI:
        path: .
        binary: som
        args: "-Dsom.superinstructions=true "
    SOMns-interp-without-SI:
        path: .
        binary: som
        args: "-G -Dsom.superinstructions=false "
    SOMns-graal-without-SI:
        path: .
        binary: som
        args: "-Dsom.superinstructions=false "

experiments:
    interp-slow:
        description: All Benchmarks, no Graal
        actions: benchmarks
        executions:
        - SOMns-interp-without-SI:
            benchmark:
                - micro-startup
                - micro-steady
                - macro-startup
                - macro-steady
                - sort-startup
                - sort-steady
                - som-startup
                - som-steady
                - fj-startup
                - fj-steady
        - SOMns-interp-with-SI:
            benchmark:
                - micro-startup
                - micro-steady
                - macro-startup
                - macro-steady
                - sort-startup
                - sort-steady
                - som-startup
                - som-steady
                - fj-startup
                - fj-steady

    graal-slow:
        description: All Benchmarks, with Graal
        actions: benchmarks
        executions:
        - SOMns-graal-without-SI:
            benchmark:
                - micro-startup
                - micro-steady
                - macro-startup
                - macro-steady
                - sort-startup
                - sort-steady
                - som-startup
                - som-steady
                - fj-startup
                - fj-steady
        - SOMns-graal-with-SI:
            benchmark:
                - micro-startup
                - micro-steady
                - macro-startup
                - macro-steady
                - sort-startup
                - sort-steady
                - som-startup
                - som-steady
                - fj-startup
                - fj-steady

    interp-fast:
        description: Faster Benchmarks only, no Graal
        actions: benchmarks
        executions:
        - SOMns-interp-without-SI:
            benchmark:
                - micro-startup
                - sort-startup
                - som-startup
        - SOMns-interp-with-SI:
            benchmark:
                - micro-startup
                - sort-startup
                - som-startup

    graal-fast:
        description: Faster Benchmarks only, with Graal
        actions: benchmarks
        executions:
        - SOMns-graal-without-SI:
            benchmark:
                - micro-startup
                - sort-startup
                - som-startup
        - SOMns-graal-with-SI:
            benchmark:
                - micro-startup
                - sort-startup
                - som-startup
